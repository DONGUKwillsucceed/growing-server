generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Albums {
  id            String          @id @db.VarChar(64)
  createdAt     DateTime        @default(now()) @db.DateTime(0)
  modifiedAt    DateTime        @default(now()) @db.DateTime(0)
  isDeleted     Int             @default(0) @db.TinyInt
  title         String          @db.VarChar(100)
  subHead       String?         @db.VarChar(100)
  coupleId      String          @db.VarChar(64)
  userId        String          @db.VarChar(64)
  Couples       Couples         @relation(fields: [coupleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Albums_Couple_FK")
  Users         Users           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Albums_Users_FK")
  Albums_Photos Albums_Photos[]

  @@index([userId], map: "Albums_Users_FK_idx")
  @@index([coupleId], map: "Albums_Couple_FK_idx")
}

model Albums_Photos {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.DateTime(0)
  albumId   String   @db.VarChar(64)
  photoId   String   @db.VarChar(64)
  Albums    Albums   @relation(fields: [albumId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Albums_FK")
  Photos    Photos   @relation(fields: [photoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Photos_FK")

  @@index([albumId], map: "Albums_FK_idx")
  @@index([photoId], map: "Photos_FK_idx")
}

model ChattingStorage {
  id         String    @id @db.VarChar(64)
  createdAt  DateTime  @default(now()) @db.DateTime(0)
  isDeleted  Int       @default(0) @db.TinyInt
  chattingId String    @db.VarChar(64)
  coupleId   String    @db.VarChar(64)
  userId     String    @db.VarChar(64)
  Chattings  Chattings @relation(fields: [chattingId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Storage_Chattings_FK")
  Couples    Couples   @relation(fields: [coupleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Storage_Couples_FK")
  Users      Users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Storage_Users_FK")

  @@index([chattingId], map: "Storage_Chattings_FK_idx")
  @@index([coupleId], map: "Storage_Couples_FK_idx")
  @@index([userId], map: "Storage_Users_FK_idx")
}

model Chattings {
  id                      String                    @id @db.VarChar(64)
  createdAt               DateTime                  @default(now()) @db.DateTime(0)
  modifiedAt              DateTime                  @default(now()) @db.DateTime(0)
  isNoticed               Int                       @default(0) @db.TinyInt
  content                 String?                   @db.VarChar(1000)
  coupleId                String                    @db.VarChar(64)
  userId                  String                    @db.VarChar(64)
  parentId                String?                   @db.VarChar(64)
  isConfirmed             Int                       @default(0) @db.TinyInt
  Chattings               Chattings?                @relation("ChattingsToChattings", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Chattings_Chattings_FK")
  Couples                 Couples                   @relation(fields: [coupleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Chattings_Couples_FK")
  Users                   Users                     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Chattings_Users_FK")
  ChattingStorage         ChattingStorage[]
  Chatting_Emoji          Chatting_Emoji[]
  Chatting_Photo          Chatting_Photo[]
  other_Chattings         Chattings[]               @relation("ChattingsToChattings")
  NoticedChatting         NoticedChatting[]
  User_Chatting_IsDeleted User_Chatting_IsDeleted[]
  VoiceStorage            VoiceStorage[]

  @@index([parentId], map: "Chattings_Chattings_FK_idx")
  @@index([coupleId], map: "Chattings_Couples_FK_idx")
  @@index([userId], map: "Chattings_Users_FK_idx")
}

model Couples {
  id               String             @id @db.VarChar(64)
  createdAt        DateTime           @default(now()) @db.DateTime(0)
  modifiedAt       DateTime           @default(now()) @db.DateTime(0)
  isDeleted        Int                @default(0) @db.TinyInt
  anniversaryDay   DateTime           @db.DateTime(0)
  lastVistADay     Int                @default(0)
  Albums           Albums[]
  ChattingStorage  ChattingStorage[]
  Chattings        Chattings[]
  FSM_Device_Token FSM_Device_Token[]
  Pets             Pets[]
  Photos           Photos[]
  Plan             Plan[]
  QuestionStorage  QuestionStorage[]
  Users            Users[]
  VideoStorage     VideoStorage[]
  VoiceStorage     VoiceStorage[]
}

model PetCare {
  touchCount         Int    @default(0)
  isHaveDinner       Int    @default(0) @db.TinyInt
  isHaveBreakfast    Int    @default(0) @db.TinyInt
  isUseStorage       Int    @default(0) @db.TinyInt
  isMaleSpeakLoveU   Int    @default(0) @db.TinyInt
  isFemaleSpeakLoveU Int    @default(0) @db.TinyInt
  id                 String @id @db.VarChar(64)
  Pets               Pets[]
}

model PetImages {
  id                  String @id @db.VarChar(64)
  name                String @db.VarChar(100)
  level               Int    @default(1) @db.TinyInt
  normalReactionUrl   String @db.VarChar(500)
  eatReactionUrl      String @db.VarChar(500)
  touchReactionUrl    String @db.VarChar(500)
  graduateReactionUrl String @db.VarChar(255)
  Pets                Pets[]
}

model Pets {
  id             String    @id @db.VarChar(64)
  createdAt      DateTime  @default(now()) @db.DateTime(0)
  modifiedAt     DateTime  @default(now()) @db.DateTime(0)
  endedAt        DateTime? @db.DateTime(0)
  isDeleted      Int       @default(0) @db.TinyInt
  name           String?   @db.VarChar(100)
  isNameChanged  Int       @default(0) @db.TinyInt
  description    String?   @db.VarChar(500)
  level          Int       @default(1)
  hungryGauge    Float     @default(0)
  attentionGauge Float     @default(0)
  loveGauge      Float     @default(0)
  careId         String    @db.VarChar(64)
  coupleId       String    @db.VarChar(64)
  petImageId     String    @db.VarChar(64)
  Couples        Couples   @relation(fields: [coupleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Pets_Couples_FK")
  PetCare        PetCare   @relation(fields: [careId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Pets_PetCare_FK")
  PetImages      PetImages @relation(fields: [petImageId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Pets_PetImages_FK")

  @@index([coupleId], map: "Pets_Couples_idx")
  @@index([petImageId], map: "Pets_PetImages_idx")
  @@index([careId], map: "Pets_PetCare_FK_idx")
}

model PhotoComments {
  id         String   @id @db.VarChar(64)
  createdAt  DateTime @default(now()) @db.DateTime(0)
  modifiedAt DateTime @default(now()) @db.DateTime(0)
  isDeleted  Int      @default(0) @db.TinyInt
  content    String   @db.VarChar(1000)
  photoId    String   @db.VarChar(64)
  userId     String   @db.VarChar(64)
  Photos     Photos   @relation(fields: [photoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Comments_Photos_FK")
  Users      Users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Comments_Users_FK")

  @@index([photoId], map: "Comments_Photos_FK_idx")
  @@index([userId], map: "Comments_Users_FK_idx")
}

model Photos {
  id                            String           @id @db.VarChar(64)
  createdAt                     DateTime         @default(now()) @db.DateTime(0)
  modifiedAt                    DateTime         @default(now()) @db.DateTime(0)
  isDeleted                     Int              @default(0) @db.TinyInt
  where                         String           @db.VarChar(45)
  s3Path                        String           @db.VarChar(500)
  coupleId                      String           @db.VarChar(64)
  userId                        String           @db.VarChar(64)
  videoId                       String?          @db.VarChar(64)
  Couples                       Couples          @relation(fields: [coupleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Photos_Couples_FK")
  Users                         Users            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Photos_Users_FK")
  VideoStorage                  VideoStorage?    @relation(fields: [videoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Photos_VideoStorage_id_fk")
  Albums_Photos                 Albums_Photos[]
  Chatting_Photo                Chatting_Photo[]
  PhotoComments                 PhotoComments[]
  Users_PhotosToUsers_profileId Users[]          @relation("PhotosToUsers_profileId")

  @@index([coupleId], map: "Photos_Couples_FK_idx")
  @@index([userId], map: "Photos_Users_FK_idx")
  @@index([videoId], map: "Photos_VideoStorage_id_fk")
}

model QuestionStorage {
  id                    String            @id @db.VarChar(64)
  createdAt             DateTime          @default(now()) @db.DateTime(0)
  modifiedAt            DateTime          @default(now()) @db.DateTime(0)
  content               String            @db.VarChar(1000)
  coupleId              String            @db.VarChar(64)
  parentId              String?           @db.VarChar(64)
  userId                String?           @db.VarChar(64)
  Couples               Couples           @relation(fields: [coupleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Question_Couples_FK")
  QuestionStorage       QuestionStorage?  @relation("QuestionStorageToQuestionStorage", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Question_Question_FK")
  Users                 Users?            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Question_Users_FK")
  other_QuestionStorage QuestionStorage[] @relation("QuestionStorageToQuestionStorage")

  @@index([coupleId], map: "Question_Couples_FK_idx")
  @@index([parentId], map: "Question_Question_FK_idx")
  @@index([userId], map: "Question_Users_FK_idx")
}

model Users {
  id                             String                           @id @db.VarChar(64)
  createdAt                      DateTime                         @default(now()) @db.DateTime(0)
  modifiedAt                     DateTime                         @default(now()) @db.DateTime(0)
  isDeleted                      Int                              @default(0) @db.TinyInt
  nickName                       String                           @default("나") @db.VarChar(100)
  gender                         String?                          @db.VarChar(45)
  birthDay                       DateTime?                        @db.DateTime(0)
  coupleId                       String?                          @db.VarChar(64)
  password                       String?                          @db.VarChar(45)
  verificationCode               String                           @db.VarChar(45)
  kakaoId                        String                           @db.VarChar(100)
  profileId                      String?                          @db.VarChar(64)
  Couples                        Couples?                         @relation(fields: [coupleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Users_Couples_FK")
  Photos_PhotosToUsers_profileId Photos?                          @relation("PhotosToUsers_profileId", fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Users_Photos_id_fk")
  Albums                         Albums[]
  ChattingStorage                ChattingStorage[]
  Chattings                      Chattings[]
  Emoji_Order                    Emoji_Order[]
  Emoji_Package                  Emoji_Package[]
  FSM_Device_Token               FSM_Device_Token[]
  NoticedChatting                NoticedChatting[]
  PhotoComments                  PhotoComments[]
  Photos                         Photos[]
  QuestionStorage                QuestionStorage[]
  User_Chatting_IsDeleted        User_Chatting_IsDeleted[]
  User_NoticedChatting_IsDeleted User_NoticedChatting_IsDeleted[]
  VideoStorage                   VideoStorage[]
  VoiceStorage                   VoiceStorage[]

  @@index([coupleId], map: "Users_Couples_FK_idx")
  @@index([profileId], map: "Users_Photos_id_fk")
}

model VoiceStorage {
  id         String    @id @db.VarChar(64)
  createdAt  DateTime  @default(now()) @db.DateTime(0)
  isDeleted  Int       @default(0) @db.TinyInt
  s3Path     String    @db.VarChar(500)
  coupleId   String    @db.VarChar(64)
  userId     String    @db.VarChar(64)
  chattingId String    @db.VarChar(64)
  time       Int
  name       String    @db.VarChar(100)
  Chattings  Chattings @relation(fields: [chattingId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Voice_Chatting_FK")
  Couples    Couples   @relation(fields: [coupleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Voice_Couples_FK")
  Users      Users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Voice_Users_FK")

  @@index([coupleId], map: "Voice_Couples_FK_idx")
  @@index([userId], map: "Voice_Users_FK_idx")
  @@index([chattingId], map: "Voice_Chatting_FK_idx")
}

model Chatting_Photo {
  id         Int       @id @default(autoincrement())
  chattingId String    @db.VarChar(64)
  photoId    String    @db.VarChar(64)
  Chattings  Chattings @relation(fields: [chattingId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "CP_Chatting_FK")
  Photos     Photos    @relation(fields: [photoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "CP_Photo_FK")

  @@index([chattingId], map: "CP_Chatting_FK_idx")
  @@index([photoId], map: "CP_Photo_FK_idx")
}

model Emoji_Package {
  id          String        @id @db.VarChar(64)
  name        String        @db.VarChar(100)
  isDeleted   Int           @default(0) @db.TinyInt
  createdAt   DateTime      @default(now()) @db.DateTime(0)
  modifiedAt  DateTime      @default(now()) @db.DateTime(0)
  authorId    String        @default("10509d8b-7aac-44c3-bc4d-8dcde71f0929") @db.VarChar(64)
  Users       Users         @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "EP_User_FK")
  Emoji_Order Emoji_Order[]
  Emojis      Emojis[]

  @@index([authorId], map: "EP_User_FK_idx")
}

model Emojis {
  id             String           @id @db.VarChar(64)
  name           String?          @db.VarChar(100)
  imageUrl       String           @db.VarChar(500)
  packageId      String           @db.VarChar(64)
  isDeleted      Int              @default(0) @db.TinyInt
  createdAt      DateTime         @default(now()) @db.DateTime(0)
  modifiedAt     DateTime         @default(now()) @db.DateTime(0)
  Emoji_Package  Emoji_Package    @relation(fields: [packageId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Emoji_EP_FK")
  Chatting_Emoji Chatting_Emoji[]

  @@index([packageId], map: "Emoji_EP_FK_idx")
}

model Chatting_Emoji {
  id         Int       @id @default(autoincrement())
  chattingId String    @db.VarChar(64)
  emojiId    String    @db.VarChar(64)
  Chattings  Chattings @relation(fields: [chattingId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "CE_Chatting_FK")
  Emojis     Emojis    @relation(fields: [emojiId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "CE_Emoji_FK")

  @@index([chattingId], map: "CE_Chatting_FK_idx")
  @@index([emojiId], map: "CE_Emoji_FK_idx")
}

model User_Chatting_IsDeleted {
  id         Int       @id @default(autoincrement())
  userId     String    @db.VarChar(64)
  chattingId String    @db.VarChar(64)
  isDeleted  Int       @default(0) @db.TinyInt
  Chattings  Chattings @relation(fields: [chattingId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "UCID_Chatting_FK")
  Users      Users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "UCID_User_FK")

  @@index([chattingId], map: "UCID_Chatting_FK_idx")
  @@index([userId], map: "UCID_User_FK_idx")
}

model User_NoticedChatting_IsDeleted {
  id                Int             @id @default(autoincrement())
  noticedChattingId String          @db.VarChar(64)
  userId            String          @db.VarChar(64)
  isDeleted         Int?            @default(0) @db.TinyInt
  isFolden          Int?            @default(0) @db.TinyInt
  NoticedChatting   NoticedChatting @relation(fields: [noticedChattingId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "UNC_NC_FK")
  Users             Users           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "UNC_User_FK")

  @@index([userId], map: "UNC_User_FK_idx")
  @@index([noticedChattingId], map: "UNK_Chatting_FK_idx")
}

model NoticedChatting {
  id                             String                           @id @db.VarChar(64)
  userId                         String                           @db.VarChar(64)
  chattingID                     String                           @db.VarChar(64)
  createdAt                      DateTime                         @default(now()) @db.DateTime(0)
  Chattings                      Chattings                        @relation(fields: [chattingID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "AC_Chatting_FK")
  Users                          Users                            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "AC_User_FK")
  User_NoticedChatting_IsDeleted User_NoticedChatting_IsDeleted[]

  @@index([chattingID], map: "AC_Chatting_FK_idx")
  @@index([userId], map: "AC_User_FK_idx")
}

model Questions_Warehouse {
  id         Int      @id @default(autoincrement())
  content    String   @db.VarChar(800)
  level      Int
  createdAt  DateTime @default(now()) @db.DateTime(0)
  modifiedAt DateTime @default(now()) @db.DateTime(0)
}

model Plan {
  id          String   @id @db.VarChar(64)
  title       String   @db.VarChar(100)
  startAt     DateTime @db.DateTime(0)
  endAt       DateTime @db.DateTime(0)
  description String?  @db.VarChar(500)
  latitude    Float?
  longitude   Float?
  alarm       String   @db.VarChar(45)
  address     String?  @db.VarChar(100)
  createdAt   DateTime @default(now()) @db.DateTime(0)
  modifiedAt  DateTime @default(now()) @db.DateTime(0)
  coupleId    String   @db.VarChar(64)
  isDeleted   Int      @default(0) @db.TinyInt
  Couples     Couples  @relation(fields: [coupleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Plan_Couple_FK")

  @@index([coupleId], map: "Plan_Couple_FK_idx")
}

model Error_Log {
  id        Int      @id @default(autoincrement())
  label     String   @db.VarChar(100)
  message   String   @db.VarChar(100)
  stack     String   @db.VarChar(800)
  createdAt DateTime @default(now()) @db.DateTime(0)
  name      String   @db.VarChar(100)
}

model Emoji_Order {
  id            String        @id @db.VarChar(64)
  emojiPackId   String        @db.VarChar(64)
  buyerId       String        @db.VarChar(64)
  createdAt     DateTime      @default(now()) @db.DateTime(0)
  modifiedAt    DateTime      @default(now()) @db.DateTime(0)
  price         Int           @default(0)
  Emoji_Package Emoji_Package @relation(fields: [emojiPackId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "EO_Emoji_FK")
  Users         Users         @relation(fields: [buyerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "EO_User_FK")

  @@index([emojiPackId], map: "EO_Emoji_FK_idx")
  @@index([buyerId], map: "EO_User_FK_idx")
}

model VideoStorage {
  id        String   @id @db.VarChar(64)
  createdAt DateTime @default(now()) @db.DateTime(0)
  s3Path    String   @db.VarChar(500)
  time      Float
  coupleId  String   @db.VarChar(64)
  userId    String   @db.VarChar(64)
  Couples   Couples  @relation(fields: [coupleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "VideoStorage_Couples_id_fk")
  Users     Users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "VideoStorage_Users_id_fk")
  Photos    Photos[]

  @@index([coupleId], map: "VideoStorage_Couples_id_fk")
  @@index([userId], map: "VideoStorage_Users_id_fk")
}

model FSM_Device_Token {
  id        Int      @id @default(autoincrement())
  userId    String   @db.VarChar(64)
  coupleId  String   @db.VarChar(64)
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @db.DateTime(0)
  token     String   @db.VarChar(800)
  Couples   Couples  @relation(fields: [coupleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FSM_Device_Token_Couples_id_fk")
  Users     Users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FSM_Device_Token_Users_id_fk")

  @@index([coupleId], map: "FSM_Device_Token_Couples_id_fk")
  @@index([userId], map: "FSM_Device_Token_Users_id_fk")
}

model Notice {
  id        Int      @id
  title     String   @db.VarChar(255)
  context   String   @db.LongText
  isDeleted Int      @db.TinyInt
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @db.DateTime(0)
}
